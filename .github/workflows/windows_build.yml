# Nombre del Workflow (aparecerá en la pestaña Actions de GitHub)
name: Build Flutter Windows App

# ¿Cuándo se ejecuta este workflow?
on:
  # Cuando haces push a la rama 'main'
  push:
    branches: [ main ]
  # También permite ejecutarlo manually desde la pestaña Actions
  workflow_dispatch:

# Definición de los trabajos (jobs) a ejecutar
jobs:
  # Nombre del trabajo (puede ser cualquiera)
  build-windows:
    # Usar una máquina virtual Windows proporcionada por GitHub
    runs-on: windows-latest

    # Pasos que se ejecutarán en la máquina virtual
    steps:
      # 1. Descargar tu código del repositorio
      - name: Checkout code
        uses: actions/checkout@v4 # Acción predefinida para descargar código

      # 2. Configurar el entorno de Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2 # Acción popular para configurar Flutter
        with:
          channel: 'stable' # Usar el canal estable de Flutter (puedes cambiarlo)
          # flutter-version: '3.x.x' # Opcional: especificar una versión exacta

      # 3. Habilitar soporte de escritorio Windows (por si acaso)
      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      # 4. Obtener las dependencias de Flutter (como flutter pub get)
      - name: Get dependencies
        run: flutter pub get

      # 5. Construir la aplicación para Windows en modo Release
      - name: Build Windows Release
        run: flutter build windows --release # Compila la versión final

      # --- PASO DE DIAGNÓSTICO CORREGIDO (con x64) ---
      # 6a. Verificar y Listar Salida del Build
      - name: Check Build Output
        run: |
          $outputPath = "build\windows\x64\runner\Release" # <-- RUTA CORREGIDA con x64
          if (Test-Path -Path $outputPath) {
            Write-Host "Directorio de salida encontrado en $outputPath. Contenido:"
            Get-ChildItem -Path $outputPath -Recurse # Listar contenido
          } else {
            # Si no existe, mostrar qué hay en carpetas superiores y fallar
            Write-Error "¡ERROR! Directorio de salida '$outputPath' no encontrado."
            if (Test-Path -Path "build\windows\x64\runner") {
              Write-Host "Contenido de build\windows\x64\runner:"
              Get-ChildItem -Path "build\windows\x64\runner"
            } else if (Test-Path -Path "build\windows") {
               Write-Host "Contenido de build\windows:"
               Get-ChildItem -Path "build\windows"
            }
             else {
               Write-Host "'build\windows\x64\runner' no encontrado."
            }
            exit 1 # Hacer que el workflow falle aquí
          }
        shell: powershell # Ejecutar con PowerShell

      # --- PASO DE EMPAQUETADO CORREGIDO (con x64) ---
      # 6b. Empaquetar la carpeta Release
      - name: Package Release Build
        run: Compress-Archive -Path build\windows\x64\runner\Release -DestinationPath duelpoke_tourney_windows.zip -Force # <-- RUTA CORREGIDA con x64
        shell: powershell # Ejecutar con PowerShell

      # 7. Subir el artefacto (Sin cambios en la acción misma)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifact # Nombre del artefacto en GitHub
          path: duelpoke_tourney_windows.zip # Ruta al archivo Zip que creamos